def correct?(lineEng)
  if (
    lineEng.end_with?(".\n" ) or
    lineEng.end_with?(".”\n") or
    lineEng.end_with?("?”\n") or
    lineEng.end_with?("?\n" ) or
    lineEng.end_with?("!\n" ) or
    lineEng.end_with?("!”\n") or
    lineEng.end_with?(".’\n") or
    lineEng.end_with?("!’\n") or
    lineEng.end_with?("?’\n") or
    lineEng.end_with?("-“\n")
  ) and lineEng.size > $desiredEngLineSize
    if $offsetsHash[$number] < 0
      $offsetsHash[$number] += 1
      false
    else
      true
    end
  else
    false
  end
end

def correct2?
  if $offsetsHash[$number] > 0
    $offsetsHash[$number] -= 1
    true
  else
    false
  end
end


begin
  rus = File.open("curDataRus", "r:UTF-8")
  eng = File.open("curDataEng", "r:UTF-8")
  output = File.open("RusEng_Worm.txt", "w:UTF-8")

  lenEng = 0
  engPoints = 0
  rusPoints = 0
  $desiredEngLineSize = 179
  $number = 1
  $offsetsHash = {
    23 => -1,
    27 => -1,
    37 => -1,
    61 => -1,
    76 => -2,
    81 => -1,
    92 => -1,
    98 => -1,
    118 => -1,
    127 => -1,
    135 => 1,
    150 => 3,
    151 => 1,
    164 => 1,
    180 => -2,
    194 => -1,
    198 => 3,
    201 => -1,
    206 => -3,
    212 => 1,
    213 => -2,
    220 => -3,
    226 => 1,
    229 => -1,
    259 => 2,
    274 => -1,
    287 => 1,
    290 => -1,
    292 => -1,
    294 => -1,
    322 => -2,
    332 => -2,
    341 => -2,
    348 => 2,
    356 => -1,
    365 => -1,
    370 => -7,
    374 => -1,
    379 => -1,
    390 => -2,
    393 => -1,
    397 => -1,
    409 => -1,
    457 => 2,
    468 => 1,
    472 => -1,
    501 => 1,
    510 => 2,
    515 => -1,
    569 => -1,
    583 => -1,
    584 => -1,
    599 => 2,
    600 => -1,
    633 => -1,
    636 => -1,
    642 => -1,
    644 => -1,
    652 => -1,
    659 => -1,
    663 => -1,
    666 => -1,
    678 => -1,
    682 => -2,
    688 => -1,
    689 => 1,
    692 => -1,
    702 => -1,
    706 => -1,
    710 => 1,
    718 => 2,
    723 => 1,
    734 => -1,
    772 => 1,
    778 => 1,
    782 => 1,
    784 => -1,
    796 => 1,
    797 => 1,
    812 => -1,
    824 => 1,
    834 => -1,
    867 => -1,
    893 => -1,
    894 => 1,
    905 => 1,
    941 => -1,
    949 => -2,
    970 => 1,
    973 => -1,
    978 => 1,
    1012 => 1,
    1021 => 1,
    1022 => 2,
    1049 => 1,
    1061 => 1,
    1075 => 1,
    1077 => 1,
    1090 => 4,
    1101 => 1,
    1109 => 2,
    1135 => -2,
    1151 => 2,
    1184 => -1,
    1185 => -3,
    1200 => 1,
    1247 => 1,
    1257 => 2,
    1263 => 1,
    1295 => -3,
    1328 => 1,
    1340 => -1,
    1344 => -1,
    1364 => 1,
    1368 => 1,
    1424 => 1,
    1425 => 2,
    1427 => 2,
    1454 => -1,
    1457 => -2,
    1465 => -1,
    1468 => -1,
    1489 => -1,
    1494 => 1,
    1499 => -1,
    1504 => -1,
    1507 => -1,
    1511 => -1,
    1514 => -2,
    1515 => -3,
    1519 => -1,
    1523 => -1,
    1528 => -1,
    1530 => -1,
    1534 => -1,
    1535 => -1,
    1549 => -1,
    1558 => -1,
    1562 => -5,
    1563 => -1,
    1569 => -1,
    1588 => -1,
    1591 => -1,
    1595 => -1,
    1598 => -1,
    1599 => -1,
    1600 => -1,
    1607 => -1,
    1620 => -2,
    1621 => -2,
    1622 => -2,
    1636 => 2,
    1645 => 2,
    1648 => -1,
    1649 => 1,
    1654 => 1,
    1668 => -1,
    1673 => -1,
    1685 => 1,
    1692 => -1,
    1720 => -1,
    1728 => -1,
    1733 => -2,
    1748 => -1,
    1753 => -1,
    1763 => -1,
    1764 => -1,
    1765 => -1,
    1772 => -1,
    1775 => -1,
    1776 => 2,
    1781 => -1,
    1784 => 1,
    1786 => -3,
    1796 => 7,
    1797 => -1,
    1799 => 1,
    1828 => -1,
    1832 => 1,
    1838 => -1,
    1851 => -1,
    1854 => 1,
    1858 => 2,
    1870 => -1,
    1885 => -2,
    1886 => -1,
    1889 => -2,
    1893 => -2,
    1905 => -1,
    1941 => 1,
    1945 => 1,
    1947 => 1,
    1950 => -1,
    1955 => [-1],
    1957 => [-1],
    1958 => -1,
    1963 => [-1],
    1969 => -1,
    1979 => -1,
    1980 => -1,
    1983 => -1,
    1986 => -1,
    1996 => [-1],
    1997 => -1,
    2001 => [-1],
    2002 => [-1],
    2003 => -1,
    2024 => [-1],
    2025 => -1,
    2035 => [-1],
    2036 => -1,
    2042 => -1,
    2052 => -1,
    2068 => 1,
    2087 => -1,
    2100 => 1,
    2106 => 2,
    2111 => -1,
    2112 => [-1],
    2114 => -1,
    2125 => -1,
    2126 => 1,
    2155 => -1,
    2169 => -1,
    2176 => 2,
    2185 => -1,
    2213 => 5,
    2215 => -1,
    2233 => 1,
    2254 => -1,
    2258 => 1,
    2266 => 1,
    2268 => 1,
    2271 => -1,
    2314 => 1,
    2324 => -1,
    2336 => 1,
    2337 => 1,
    2347 => -1,
    2368 => -1,
    2369 => [-1],
    2370 => -1,
    2371 => [-1],
    2373 => 2,
    2391 => 1,
    2401 => 1,
    2428 => -1,
    2430 => 1,
    2434 => 3,
    2441 => -1,
    2466 => 1,
    2472 => -1,
    2476 => 1,
    2509 => -1,
    2523 => 1,
    2530 => [-1],
    2539 => [-1],
    2543 => [-1],
    2555 => -1,
    2568 => -1,
    2569 => 2,
    2573 => 2,
    2576 => 1,
    2579 => 2,
    2583 => 1,
    2584 => 1,
    2585 => 3,
    2616 => -1,
    2627 => 3,
    2645 => -1,
    2650 => -1,
    2659 => -1,
    2695 => 1,
    2701 => -1,
    2708 => -1,
    2715 => 2,
    2719 => -1,
    2720 => -1,
    2729 => -1,
    2730 => -1,
    2766 => 3,
    2771 => 2,
    2789 => 4,
    2794 => -1,
    2798 => 1,
    2813 => -1,
    2857 => 1,
    2897 => 1,
    2913 => -1,
    2918 => 2,
    2922 => 2,
    2924 => 2,
    2930 => 3,
    2939 => 1,
    2944 => 2,
    2953 => 4,
    2964 => 3,
    2986 => [-1],
    3010 => -1,
    3035 => -1,
    3046 => -1,
    3072 => -1,
    3088 => 1,
    3091 => 2,
    3107 => 2,
    3108 => 2,
    3127 => 1,
    3133 => 1,
    3134 => -1,
    3148 => -1,
    3149 => 1,
    3157 => -1,
    3158 => -1,
    3168 => -1,
    3176 => -1,
    3178 => -1,
    3179 => 1,
    3218 => 1,
    3234 => 2,
    3247 => -1,
    3252 => -1,
    3265 => -1,
    3283 => -1,
    3289 => -1,
    3298 => 1,
    3309 => -1,
    3316 => 4,
    3325 => -1,
    3326 => -1,
    3330 => -1,
    3372 => 2,
    3380 => 6,
    3387 => -1,
    3409 => -1,
    3436 => 1,
    3440 => [-1],
    3448 => -1,
    3453 => 1,
    3474 => 1,
    3481 => 1,
    3505 => -1,
    3510 => -1,
    3511 => 1,
    3524 => -1,
    3616 => 2,
    3631 => 2,
    3657 => 1,
    3661 => [-1],
    3694 => 1,
    3703 => -1,
    3708 => -1,
    3715 => -1,
    3724 => 2,
    3737 => -1,
    3750 => -1,
    3757 => 1,
    3780 => 1,
    3811 => 1,
    3813 => 2,
    3822 => 4,
    3830 => 1,
    3831 => 3,
    3834 => 1,
    3853 => -1,
    3864 => 1,
    3865 => -1,
    3869 => -1,
    3884 => -1,
    3895 => -1,
    3899 => -1,
    3931 => -1,
    3938 => 3,
    3941 => 1,
    3968 => 1,
    3972 => -1,
    3997 => 1,
    4006 => 2,
    4007 => 3,
    4013 => [-1],
    4018 => [-1],
    4095 => 1,
    4104 => -1,
    4106 => -1,
    4126 => 1,
    4143 => -1,
    4159 => -1,
    4166 => -1,
    4173 => -1,
    4189 => -1,
    4192 => 2,
    4195 => -1,
    4236 => 1,
    4240 => 1,
    4247 => 2,
    4256 => 1,
    4278 => 3,
    4294 => 1,
    4298 => 1,
    4327 => 3,
    4374 => [-1],
    4435 => 1,
    4463 => 2,
    4468 => 1,
    4470 => 1,
    4490 => -1,
    4517 => -1,
    4559 => 1,
    4560 => 1,
    4571 => 3,
    4575 => 2,
    4600 => 1,
    4636 => 1,
    4643 => -1,
    4669 => -1,
    4670 => -1,
    4692 => [-1],
    4696 => -1,
    4698 => -1,
    4708 => -1,
    4720 => 1,
    4725 => -1,
    4734 => 1,
    4751 => [-1],
    4757 => -1,
    4783 => -1,
    4794 => -1,
    4796 => -1,
    4812 => 1,
    4836 => -1,
    4847 => 2,
    4849 => 2,
    4863 => 1,
    4897 => -1,
    4898 => 1,
    4901 => -1,
    4913 => -1,
    4921 => [-1],
    4923 => -1,
    4927 => -1,
    4937 => 4,
    4992 => [-1],
    5008 => -1,
    5010 => [-1],
    5012 => -1,
    5029 => -1,
    5048 => 1,
    5054 => 1,
    5056 => 3,
    5057 => 1,
    5076 => 1,
    5077 => 2,
    5112 => 1,
    5113 => 1,
    5115 => 2,
    5120 => 1,
    5122 => 5,
    5127 => 2,
    5129 => 1,
    5142 => 2,
    5148 => 2,
    5172 => 1,
    5175 => -1,
    5221 => 2,
    5273 => -1,
    5277 => 1,
    5290 => 1,
    5295 => 4,
    5306 => 1,
    5315 => 1,
    5322 => 1,
    5333 => 1,
    5343 => 2,
    5352 => [-1],
    5353 => 1,
    5357 => 2,
    5397 => 1,
    5402 => 1,
    5405 => 1,
    5422 => 1,
    5428 => 3,
    5430 => 4,
    5448 => 1,
    5464 => -1,
    5481 => 1,
    5483 => 2,
    5490 => 1,
    5502 => 3,
    5503 => 17,
    5521 => 2,
    5522 => 3,
    5529 => 1,
    5538 => 3,
    5543 => 3,
    5592 => 3,
    5600 => 3,
    5610 => 1,
    5619 => 3,
    5623 => 8,
    5624 => 11,
    5625 => 8,
    5626 => 3,
    5650 => 1,
    5676 => 2,
    5688 => -1,
    5693 => -1,
    5696 => 1,
    5697 => -1,
    5700 => 1,
    5701 => [-1],
    5710 => 1,
    5746 => 2,
    5756 => -1,
    5778 => 2,
    5779 => 2,
    5814 => 2,
    5868 => 2,
    5870 => 3,
    5880 => 2,
    5884 => -1,
    5885 => 4,
    5889 => -1,
    5936 => 1,
    5952 => 2,
    5967 => -1,
    5968 => 3,
    5988 => 1,
    6041 => [-1],
    6056 => 4,
    6063 => 2,
    6069 => 2,
    6074 => 1,
    6077 => 2,
    6097 => 1,
    6105 => 4,
    6106 => 5,
    6112 => 2,
    6113 => 6,
    6116 => 5,
    6122 => 1,
    6138 => 1,
    6141 => 1,
    6160 => -1,
    6163 => -1,
    6169 => [-1],
    6182 => [-1],
    6183 => -1,
    6202 => 2,
    6207 => -1,
    6267 => 1,
    6281 => 2,
    6288 => 1,
    6333 => 2,
    6335 => 1,
    6336 => -1,
    6338 => 2,
    6346 => 2,
    6348 => [-1],
    6359 => -1,
    6374 => 1,
    6397 => 2,
    6399 => 2,
    6401 => 2,
    6426 => 1,
    6434 => 1,
    6459 => -1,
    6474 => 3,
    6496 => 1,
    6504 => -1,
    6522 => 3,
    6541 => 1,
    6552 => -1,
    6559 => 3,
    6570 => 2






  }
  $offsetsHash.default = 0

  eng.each_line("\n") do |lineEng|
    output.print (lineEng = lineEng.encode('utf-8'))

    # maybe should add some lines of the old version here

    engPoints += lineEng.scan(/([.!?])|(-“)/).size
    if $offsetsHash[$number].class.name == "Array"
      if $offsetsHash[$number][0] == 0
        $offsetsHash[$number] = 0
      else
        $offsetsHash[$number][0] += 1
        next
      end
    else
      lenEng += lineEng.length
    end
    if correct?(lineEng)
      output.puts
      output.puts lineRus = rus.readline("\n\n")
      rusPoints += lineRus.scan(/[.!?]/).size
      lenRus = lineRus.length
      while (lenRus.to_f / lenEng < 0.78 and lenEng > 90 or
             lineRus.end_with?(":\n\n") or
             lenRus.to_f / lenEng < 0.52 or
             rusPoints < engPoints and (lenRus.to_f / lenEng < 0.83) or
             correct2?)
        lineRus = rus.readline("\n\n")
        rusPoints += lineEng.scan(/[.!?]/).size
        output.puts lineRus
        lenRus += lineRus.length
      end

      lenEng = 0
      engPoints = 0
      rusPoints = 0
      $number += 1
      output.puts "-----#{$number}"
      output.puts "-----"
    end
  end

rescue  => e
  puts "Error: #{e}"
  p e.backtrace
  gets
ensure
  rus.close
  eng.close
  output.close
end

